---
title: "Parallel Computing Practical (KMXDON003)"
---

```{r}
#| echo: false
#| message: false
#| warning: false
library(iterators)
library(foreach)
library(doParallel)
library(knitr)
library(MASS)
library(boot)
library(parallel)
```

## Question 1

```{r}
#| echo: false
cl <- makeCluster(detectCores() - 1)
registerDoParallel(cl)
n <- 100

run <- foreach(i = 1:n, .combine = rbind) %dopar% {
  sample.data <- rexp(100, rate = 1)
  sample.mean <- mean(sample.data)
  sample.var <- var(sample.data)
  c(sample.mean, sample.var)
}

df <- as.data.frame(run)
colnames(df) <- c("Mean", "Variance")
head(df)
stopCluster(cl)
```

## Question 2

```{r}
#| echo: false
data(galaxies)
dat <- galaxies

B <- 10000 
b <- 1000

# --- SERIAL BOOTSTRAP ---
serial.s <- Sys.time()
serial.r <- replicate(B, median(sample(dat, replace = TRUE)))
serial.t <- Sys.time() - serial.s
cat("Serial Processing Time:", serial.t)

# --- PARALLEL BOOTSTRAP ---
cl <- makeCluster(detectCores() - 1)
registerDoParallel(cl)
parallel.s2 <- Sys.time()

parallel.r2 <- foreach(i = 1:B, .combine = c) %dopar% {
  resample <- sample(dat, replace = TRUE)
  median(resample)
}

parallel.e2 <- Sys.time()
parallel.t2 <- parallel.e2 - parallel.s2
cat("Paralle Processing Time", parallel.t2)
```

Serial processing time is much faster than the parallel processing time, it suggests that the overhead from parallel processing is not worth it, given the relatively small amount of work in each iteration.

```{r}
#| echo: false
# --- Parallel Bootstrap (With 1000 Samples per batch) ---

nb <- B/b
parallel.s3 <- Sys.time()
parallel.r3 <- foreach(i=1:nb, .combine = c) %dopar%{
  # Create 1000 bootstrap samples at once
  batch.medians <- replicate(b, {
    resample <- sample(dat, replace=TRUE)
    median(resample)
  })
  # Return the batch of medians
  batch.medians
}

parallel.e3 <- Sys.time()
stopCluster(cl)
parallel.t3 <- parallel.e3 - parallel.s3

performance <- data.frame(Method = c("Serial Processing", "Parallel Processing (1 sample per iteration", "Parallel Processing (1000 samples per batch"), Time = c(serial.t, parallel.t2, parallel.t3))
kable(performance, caption="Performance Comparison Between Serial and Parallel Processing")
```

## Question 3

```{r}
#| echo: false
med <- function(x,y){
  return(median(x[y]))
}

set.seed(1000)
n <- 50
B <- 500

truemed <- log(2) # True median
count <- 0 

for (i in 1:500) {
  sample <- rexp(n, rate=1)
  boots <- boot(sample, statistic = med, R=B)
  ci <- boot.ci(boots, type="perc")
  if (!is.null(ci) && truemed >= ci[1] && truemed <= ci[2]) {
    count <- count + 1
  }
}

coverage.probability <- count/500
cat("Estimate of coverage", coverage.probability)
```

## Question 4

```{r}
#| echo: false
set.seed(1234)

cl <- makeCluster(detectCores() - 1)
registerDoParallel(cl)

max.val <- foreach(i = 1:3, .combine = c, .packages = "iterators") %dopar% {
  vec <- rnorm(5)
  max(vec)
}

stopCluster(cl)

print(max.val)
```
